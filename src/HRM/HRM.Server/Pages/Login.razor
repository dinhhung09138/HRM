

@page "/login"
@page "/login/{ReturnUrl}"

@inject NavigationManager navigationManager
@inject IAuthenticationService authenticationService
@inject HrmAuthenticationStateProvider authenticationStateProvider
@inject ISessionStorageService sessionStorageService
@inject ToastMessageHelper toastMessage


<div class="row">
    <div class="col-md-4 col-sm-3"></div>
    <div class="col-md-4 col-sm-6">
        <div class="login-wrapper">
            <div class="container-center">
                <div class="panel panel-bd">
                    <div class="panel-heading">
                        <div class="view-header">
                            <div class="header-icon">
                                <i class="pe-7s-unlock"></i>
                            </div>
                            <div class="header-title">
                                <h3 style="padding-top: 10px;">HRM Login</h3>
                            </div>
                        </div>
                        <div class="row">

                        </div>
                    </div>
                    <div class="panel-body">
                        <EditForm Model="model" OnValidSubmit="LoginClick">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-12 mb-3">
                                    <label class="control-label" for="userName">Tên đăng nhập</label>
                                    <InputText id="userName" @bind-Value="@model.UserName" class="form-control" />
                                    <ValidationMessage For="@(() => model.UserName)" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12 mb-3">
                                    <label class="control-label" for="password">Mật khẩu</label>
                                    <InputText type="password" id="password" @bind-Value="@model.Password" class="form-control" />
                                    <ValidationMessage For="@(() => model.Password)" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-12 mb-3">
                                    <button type="submit" class="btn btn-success">Đăng nhập</button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                    <div class="panel-footer" hidden>
                        <table style="cursor:pointer;font-size:12px" class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Email</th>
                                    <th>Pass</th>
                                    <th>Role</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>admin@example.com</td>
                                    <td>12345</td>
                                    <td>Super Admin</td>
                                </tr>
                                <tr>
                                    <td>alice@gmail.com </td>
                                    <td>12345</td>
                                    <td>Accounts</td>
                                </tr>
                                <tr>
                                    <td>willam@email.com</td>
                                    <td>12345</td>
                                    <td>Employee</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4 col-sm-3"></div>
</div>
<br />
<p>Message: @message</p>


@code {

    [CascadingParameter]
    Task<AuthenticationState> authenticationTask { get; set; }

    string message = string.Empty;

    [Parameter]
    public string ReturnUrl { get; set; }

    private LoginModel model = new LoginModel();

    protected override async Task OnInitializedAsync()
    {
        var abc = await authenticationStateProvider.GetAuthenticationStateAsync();

        var authTask = await authenticationTask;

        var user = authTask.User;

        if (user != null && user.Identity.IsAuthenticated == true)
        {
            message = "User logined";
        }

        base.OnInitialized();
    }

    private async Task LoginClick()
    {
        var response = await authenticationService.SignInAsync(model);

        if (response.Succeeded)
        {
            //await sessionStorageService.SetItemAsync<TokenModel>(HRM.Constant.ConstantKey.USER_SESSION_STORAGE_KEY, response.Data);

            var abc = await authenticationStateProvider.GetAuthenticationStateAsync();

            authenticationStateProvider.SetAuthenticationState(authenticationStateProvider.GetAuthenticationStateAsync());

            //authenticationStateProvider.NotifyAuthenticationStateChanged();
            authenticationStateProvider.MarkUserAsAuthenticated(response.Data);

            var authTask = await authenticationTask;

            var user = authTask.User;

            if (user != null && user.Identity.IsAuthenticated == true)
            {
                message = "User logined";
            }
            else
            {
                message = "Not login";
            }

            //if (!string.IsNullOrEmpty(ReturnUrl))
            //{
            //    navigationManager.NavigateTo(ReturnUrl);
            //}

            //navigationManager.NavigateTo("/");
        }
        else
        {
            await toastMessage.Error(response.Message);
        }


    }
}
