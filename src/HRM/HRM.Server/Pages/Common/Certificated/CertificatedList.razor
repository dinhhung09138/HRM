@page "/hr/certificated"

@inject IJSRuntime jsRuntume
@inject NavigationManager navigationManager
@inject ICertificatedService certificatedService

<HRMPanel Title="Danh sách chứng chỉ">
    <ButtonGroup>
        <HrmButton Color="@Constant.Enums.Color.Primary" Text="Thêm mới" OnClick="AddNew" />
    </ButtonGroup>
    <PanelContent>
        <HrmTable Column="6">
            <Header>
                <HrmTableTr>
                    <HrmTableTh Text="Tên loại chứng chỉ" Sort="true" style="min-width: 200px;" />
                    <HrmTableTh Text="Thứ tự" Sort="true" style="width: 90px" TextAlign="@Constant.Enums.TextAlign.Right" />
                    <HrmTableTh Text="Sử dụng" Sort="false" style="width: 100px" />
                    <HrmTableTh Text="" Sort="false" style="width: 100px;" />
                </HrmTableTr>
            </Header>
            <Body>
                @if (tableLoading == true)
                {
                    <HrmTableTr>
                        <HrmTableTd Col="4">
                            <HrmLinearLoading />
                        </HrmTableTd>
                    </HrmTableTr>
                }
                else
                {
                    if (listCount == 0)
                    {
                        <HrmTableNoData Column="4" />
                    }
                    else
                    {
                        foreach (var item in listData)
                        {
                            <HrmTableTr>
                                <HrmTableTd>
                                    @item.Name
                                </HrmTableTd>
                                <HrmTableTd TextAlign="@Constant.Enums.TextAlign.Right">
                                    @item.Precedence
                                </HrmTableTd>
                                <HrmTableTd>
                                    <HrmSwitch Checked="@item.IsActive" Disabled="true" />
                                </HrmTableTd>
                                <HrmTableTd TextAlign="@Constant.Enums.TextAlign.Center">
                                    <HrmButtonGroup Text="Chọn">
                                        <ActionItems>
                                            <HrmButtonGroupItem Text="Cập nhật" Data="item" T="CertificatedGridModel" OnClick="@UpdateClick" />
                                            <HrmDivider />
                                            <HrmButtonGroupItem text="Xóa" T="CertificatedGridModel" Data="item" OnClick="@DeleteClick" />
                                        </ActionItems>
                                    </HrmButtonGroup>
                                </HrmTableTd>
                            </HrmTableTr>
                        }
                    }
                }

            </Body>
        </HrmTable>
    </PanelContent>
</HRMPanel>

<HrmConfirmDialog Title="Xác nhận" @ref="deleteDialog" T="CertificatedGridModel" Data="deletedItem" AgreeeClick="@AgreeDeleteClick">
    <Body>
        <p>Bạn có muốn xóa dữ liệu đang chọn?</p>
    </Body>
    <Buttons>
        <p></p>
    </Buttons>
</HrmConfirmDialog>

<HrmToastMessage @ref="toastMessage" 
                 TitleType="@Constant.Enums.ToastMessageType.TitleSuccess"
                 BodyType="@Constant.Enums.ToastMessageType.CreateSuccess"/>

@code {

    private bool tableLoading = true;

    private IEnumerable<CertificatedGridModel> listData = new List<CertificatedGridModel>();
    private long listCount = 0;

    private CertificatedGridParameterModel parameterModel = new CertificatedGridParameterModel();

    private HrmConfirmDialog<CertificatedGridModel> deleteDialog = new HrmConfirmDialog<CertificatedGridModel>();
    private CertificatedGridModel deletedItem = new CertificatedGridModel();

    private HrmToastMessage toastMessage = new HrmToastMessage();

    protected override async Task OnInitializedAsync()
    {
        await LoadGridData();
    }

    private void AddNew()
    {
        navigationManager.NavigateTo("hr/certificated/create");
    }

    private void UpdateClick(CertificatedGridModel item)
    {
        navigationManager.NavigateTo($"hr/certificated/update/{item.Id}");
    }

    private void DeleteClick(CertificatedGridModel item)
    {
        deletedItem = item;
        deleteDialog.Open();
    }

    private async Task AgreeDeleteClick(CertificatedGridModel item)
    {
        deleteDialog.Close();
        CertificatedModel model = new CertificatedModel()
        {
            Id = item.Id,
            UpdateBy = 1
        };
        var result = await certificatedService.DeleteAsync(model);
        if (result.Succeeded)
        {
            await LoadGridData();
            await toastMessage.Show();
        }
        else
        {

        }
    }

    private async Task LoadGridData()
    {
        tableLoading = true;
        var result = await certificatedService.GridAsync(parameterModel);
        if (result.Succeeded)
        {
            listData = result.Data.List.ToList();
            listCount = result.Data.Count;
        }
        tableLoading = false;
    }

}
