
<th id="Column_@Id" rowspan="@Row"
    colspan="@Col"
    class="@(Sort == true ? "sorting" : "")"
    @attributes="@OtherAttributes"
    @onclick="@SortChange">
    @Text
    @if (Sort == true)
    {
        <i class="fa @sortIconClass"></i>
    }

</th>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string SortColumnId { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public int Col { get; set; } = 1;

    [Parameter]
    public int Row { get; set; } = 1;

    [Parameter]
    public bool Sort { get; set; } = false;

    [Parameter]
    public TextAlign TextAlign { get; set; } = TextAlign.Unset;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, Object> OtherAttributes { get; set; }

    [Parameter]
    public EventCallback<TableSort> OnSortClick { get; set; }

    private string sortIconClass { get; set; } = "fa-sort";

    private TableSort sortStatus { get; set; } = TableSort.None;

    protected override void OnParametersSet()
    {
        if (SortColumnId != Id)
        {
            sortStatus = TableSort.None;
            sortIconClass = "fa-sort";
            StateHasChanged();
        }
    }

    private void SortChange()
    {
        if (Sort == false)
        {
            return;
        }

        switch (sortStatus)
        {
            case TableSort.None:
                sortStatus = TableSort.Asc;
                sortIconClass = "fa-sort-alpha-asc";
                break;
            case TableSort.Asc:
                sortStatus = TableSort.Desc;
                sortIconClass = "fa-sort-alpha-desc";
                break;
            case TableSort.Desc:
                sortStatus = TableSort.Asc;
                sortIconClass = "fa-sort-alpha-asc";
                break;
        }



        OnSortClick.InvokeAsync(sortStatus);
    }

}
