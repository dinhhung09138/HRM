@page "/asset/liquidation"

@inject ToastMessageHelper toastMessageHelper
@inject NavigationManager navigationManager
@inject IHttpClientService httpClientService

<AuthorizeView>
    <Authorized>
        <HRMPanel Title="Thanh lý">
            <ButtonGroup>
                <HrmButton Color="@Constant.Enums.Color.Primary" Text="Thêm mới" OnClick="AddNewClick" />
            </ButtonGroup>
            <PanelContent>
                <HrmTable Column="9" Page="@parameterModel.Page" TotalItems="@totalItems" OnPageChange="@PageChange">
                    <Search>
                        <div class="row mb-3">
                            <div class="col-md-8 col-sm-6 col-xs-12">
                            </div>
                            <div class="col-md-4 col-sm-6 col-xs-12">
                                <div class="input-group">
                                    <input type="text" class="form-control" @bind-value="@textSearch" placeholder="Tìm kiếm" />
                                    <HrmButton Color="@Constant.Enums.Color.Primary" Text="Tìm" OnClick="@SearchClick" />
                                </div>
                            </div>
                        </div>
                    </Search>
                    <Header>
                        <HrmTableTr>
                            <HrmTableTh Id="Code" SortColumnId="@currentSortColumn" Text="Số hợp dồng" Sort="true"
                                        OnSortClick="@((arg) => OrderColumnClick(m => m.Code, arg, "Code"))"
                                        style="min-width: 90px;" />
                            <HrmTableTh Id="Vendor" SortColumnId="@currentSortColumn" Text="Nhà cung cấp" Sort="true"
                                        OnSortClick="@((arg) => OrderColumnClick(m => m.Vendor, arg, "Vendor"))" />
                            <HrmTableTh Id="LiquidationDate" SortColumnId="@currentSortColumn" Text="Ngày thanh lý" Sort="true"
                                        OnSortClick="@((arg) => OrderColumnClick(m => m.LiquidationDate, arg, "LiquidationDate"))"
                                        style="min-width: 150px;" />
                            <HrmTableTh Id="TotalCost" SortColumnId="@currentSortColumn" Text="Tổng tiền" Sort="true"
                                        OnSortClick="@((arg) => OrderColumnClick(m => m.TotalCost, arg, "TotalCost"))"
                                        style="min-width: 90px;" TextAlign="@TextAlign.Right" />
                            <HrmTableTh Id="TotalDivices" SortColumnId="@currentSortColumn" Text="SL thiết bị" Sort="true"
                                        OnSortClick="@((arg) => OrderColumnClick(m => m.TotalDivices, arg, "TotalDivices"))"
                                        style="min-width: 90px;" TextAlign="@TextAlign.Right" />
                            <HrmTableTh Text="" Sort="false" style="width: 100px;" />
                        </HrmTableTr>
                    </Header>
                    <Body>
                        @if (tableLoading == true)
                        {
                            <HrmTableTr>
                                <HrmTableTd Col="9">
                                    <HrmLinearLoading />
                                </HrmTableTd>
                            </HrmTableTr>
                        }
                        else
                        {
                            if (totalItems == 0)
                            {
                                <HrmTableNoData Column="9" />
                            }
                            else
                            {
                                int count = 0;
                                foreach (var item in listData)
                                {
                                    count++;
                                    <HrmTableTr class="@(count % 2 == 0 ? "odd" : "even")">
                                        <HrmTableTd>
                                            @item.Code
                                        </HrmTableTd>
                                        <HrmTableTd>
                                            @item.Vendor
                                        </HrmTableTd>
                                        <HrmTableTd>
                                            @item.LiquidationDate
                                        </HrmTableTd>
                                        <HrmTableTd>
                                            @item.TotalCost
                                        </HrmTableTd>
                                        <HrmTableTd>
                                            @item.TotalDivices
                                        </HrmTableTd>
                                        <HrmTableTd TextAlign="@Constant.Enums.TextAlign.Center">
                                            <HrmButtonGroup Text="Chọn">
                                                <ActionItems>
                                                    <HrmButtonGroupItem Text="Cập nhật" Data="item" T="AssetLiquidationGridModel" OnClick="@UpdateClick" />
                                                    <HrmDivider />
                                                    <HrmButtonGroupItem text="Xóa" T="AssetLiquidationGridModel" Data="item" OnClick="@DeleteClick" />
                                                </ActionItems>
                                            </HrmButtonGroup>
                                        </HrmTableTd>
                                    </HrmTableTr>
                                }
                            }
                        }
                    </Body>
                </HrmTable>
            </PanelContent>
        </HRMPanel>
        <HrmConfirmDialog Title="Xác nhận" @ref="deleteDialog" T="AssetLiquidationGridModel" Data="deletedItem" AgreeeClick="@AgreeDeleteClick">
            <Body>
                <p>Bạn có muốn xóa dữ liệu đang chọn?</p>
            </Body>
            <Buttons>
                <p></p>
            </Buttons>
        </HrmConfirmDialog>
    </Authorized>
    <NotAuthorized>
        <HrmNotAuthorize />
    </NotAuthorized>
</AuthorizeView>



@code {

    [CascadingParameter(Name = "Bredcrumb")]
    public List<BreadcurmbModel> Breadcrumb { get; set; } = new List<BreadcurmbModel>();

    private bool tableLoading = true;

    private string textSearch = string.Empty;

    private List<AssetLiquidationGridModel> listData = new List<AssetLiquidationGridModel>();
    private long totalItems = 0;
    private int tableCounter = 0;
    private string currentSortColumn = string.Empty;

    private AssetLiquidationGridParameterModel parameterModel = new AssetLiquidationGridParameterModel();

    private HrmConfirmDialog<AssetLiquidationGridModel> deleteDialog = new HrmConfirmDialog<AssetLiquidationGridModel>();
    private AssetLiquidationGridModel deletedItem = new AssetLiquidationGridModel();

    protected async override Task OnInitializedAsync()
    {
        Breadcrumb.Add(new BreadcurmbModel()
        {
            Title = "Tài sản",
            Href = "asset",
            IsActive = false,
        });

        Breadcrumb.Add(new BreadcurmbModel()
        {
            Title = "Thanh lý",
            IsActive = true,
        });

        //await LoadGridData();
    }

    private async Task SearchClick()
    {
        parameterModel.TextSearch = textSearch;
        await LoadGridData();
    }

    private async Task PageChange(Page page)
    {
        parameterModel.Page = page;
        await LoadGridData();
    }

    private void AddNewClick()
    {
        navigationManager.NavigateTo("asset/liquidation/create");
    }

    private void UpdateClick(AssetLiquidationGridModel item)
    {
        navigationManager.NavigateTo($"asset/liquidation/update/{item.Id}");
    }

    private void DeleteClick(AssetLiquidationGridModel item)
    {
        deletedItem = item;
        deleteDialog.Open();
    }

    private async Task AgreeDeleteClick(AssetLiquidationGridModel item)
    {
        deleteDialog.Close();
        var result = await httpClientService.Delete<AssetLiquidationModel, HttpActionResponseWrapper>($"asset-liquidation/{item.Id}");
        if (result.Succeeded)
        {
            await toastMessageHelper.DeleteSuccess();
            await LoadGridData();
        }
        else
        {
            await toastMessageHelper.DeleteError();
        }
    }

    private async Task LoadGridData()
    {
        tableLoading = true;
        currentSortColumn = string.Empty;

        var result = await httpClientService.Post<AssetLiquidationGridParameterModel, HttpDataResponseWrapper<Model.Grid<AssetLiquidationGridModel>>>("asset-liquidation/grid", parameterModel);
        if (result != null)
        {
            listData = result.Data.List?.ToList() ?? new List<AssetLiquidationGridModel>();
            totalItems = result.Data.Count;
            tableCounter = ((parameterModel.Page.Index - 1) * parameterModel.Page.Size);
            tableLoading = false;
        }
        StateHasChanged();
    }

    private void OrderColumnClick(Expression<Func<AssetLiquidationGridModel, dynamic>> expression, TableSort sort, string sortColumnName)
    {
        listData = listData.ColumnSort(expression, sort);
        currentSortColumn = sortColumnName;
    }

}
